# TOML based configuration for LAMINA <<VERSION>>
# ------------------------------------------------------------------------------

# Application level config
[lamina]

    # [OPTIONAL] Name of the Lamina instance
    # - This is helpful when you want to monitor several concurrent running 
    # instances of Lamina from terminal
    # - Or if you are experimenting with different configuration files, this can
    # help the user differ in what config is currently active
    instance = "OS21"
    
    # [OPTIONAL] Logging configuration for Lamina. 
    # Lamina can write its runtime to two seperate streams simultaneously. 
    # stdout  - log to terminal or standard output
    # fileout - log to a file
    # Both logging streams are optional and can be configured for different level
    # of verbosity. This is particularly helpful for admins who want to keep the
    # stdout concise with higher logging level but may want to dump trace logs
    # to a file for later analysis.
    # Here we setup the root logger for Lamina application, if the root-logger
    # is not set, no child loggers (for input / output plugins) would work either.
    # The following is the list of valid log levels:
    # 0 - TRACE     [MOST DETAILED]
    # 1 - DEBUG
    # 2 - INFO
    # 3 - WARN
    # 4 - ERROR
    # 5 - CRITICAL  [MOST CONCISE]
    log.stdout.level = 2
    log.fileout.level = 4
    log.fileout.path = 'out/log'



# Define and configure all the input plugins that you may want to use in this 
# Lamina instance here. Each input plugin will have a same naming init scheme that
# is, group.type.name. So, for example 'inputs.mqtt.banana' will create an MQTT 
# Input plugin who will have a MQTT client name 'banana'.
# Some plugins may use thier name to establish connection (e.g. MQTT) and some
# may not (e.g. HTTP) but it is required for any Lamina plugin to have a name
# since their runtime logs are going to be prefixed with their name only.
[inputs]

    # ...



# Define and configure all the output plugins that you may want to use in this 
# Lamina instance here. Each output plugin will have a same naming init scheme that
# is, group.type.name. So, for example 'outputs.mqtt.kimon' will create an MQTT 
# output plugin who will have a MQTT client name 'kimon'.
# Some plugins may use thier name to establish connection (e.g. MQTT) and some
# may not (e.g. HTTP) but it is required for any Lamina plugin to have a name
# since their runtime logs are going to be prefixed with their name only.
# Each output plugin generally has
[outputs]

    # ...



# Define data streaming settings Here you can specify arrays for input and output 
# plugins respectively. 
# Each array must have atleast one valid plugin inside of it, however there is 
# no upper limit given on the plugins specified as long as there is no duplicate.
# These arrays tell Lamina to what input and output plugins to initialize and
# use for data collection and dumping. Currently this process is executed in
# many-to-many fashion, i.e. data from all the inputs will be sent out to all
# the specified output. However, one can control this data flow with careful
# usage of tags that are specified as config parameters in the plugins.
[stream]
    inputs = []
    outputs = []